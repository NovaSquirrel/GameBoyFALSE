; FALSE for Game Boy
; Copyright (C) 2018 NovaSquirrel
;
; This program is free software: you can redistribute it and/or
; modify it under the terms of the GNU General Public License as
; published by the Free Software Foundation; either version 3 of the
; License, or (at your option) any later version.
;
; This program is distributed in the hope that it will be useful, but
; WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
; General Public License for more details.
;
; You should have received a copy of the GNU General Public License
; along with this program.  If not, see <http://www.gnu.org/licenses/>.
;

INCLUDE "gbhw.inc" 
SECTION "vars", WRAM0
sprites: ds 256 ; Sprite page, currently only used to initialize OAM to all zeros
dstack:  ds 256 ; software data stack page
rstack:  ds 256 ; return stack (probably don't need this much?)
vars:    ds 256 ; program variables

section "hram", HRAM[$FF80]
run_dma:      ds 8 ; Copy of the OAM DMA routine in HRAM

temp:         ds 8
retraces:       db ; Frame count

CursorX:        db ; X position of cursor, in cells
CursorY:        db ; Y position of cursor, in cells
MenuCursor:     db ; Y position of menu cursor
MenuCount:      db ; number of menu options

PrintX:         db
PrintY:         db

KeyDown:        db ; Keys pressed this frame
KeyLast:        db ; Keys pressed last frame
KeyNew:         db ; Keys pressed this frame that weren't last frame
KeyRepeat:      db ; Timer for key repeat

IsGameBoyColor: db ; $11 if Game Boy Color

random1:        ds 2
random2:        ds 2
InitializedRandom: db ; Nonzero if random number generator has been seeded

; Interpreter state
dsp:            db   ; data stack pointer
rsp:            db   ; return stack pointer
programptr:     ds 2 ; program pointer
opcode:         db   ; opcode number

; $0000 - $003F: RST handlers.
SECTION "rst00", ROM0[$0000]
ret
SECTION "rst08", ROM0[$0008]
ret
SECTION "rst10", ROM0[$0010]
ret
SECTION "rst18", ROM0[$0018]
ret
SECTION "rst20", ROM0[$0020]
ret
SECTION "rst28", ROM0[$0028]
ret
SECTION "rst30", ROM0[$0030]
ret
SECTION "rst38", ROM0[$0038]
ret

; $0040 - $0067: Interrupt handlers.
SECTION "vblank", ROM0[$0040]
jp vblank
SECTION "stat", ROM0[$0048]
jp stat
SECTION "timer", ROM0[$0050]
jp timer
SECTION "serial", ROM0[$0058]
jp serial
SECTION "joypad", ROM0[$0060]
jp joypad

; $0100 - $0103: Startup handler.
SECTION "header", ROM0[$00100]
nop
jp Init

; $0104 - $0133: The Nintendo Logo.
DB $CE, $ED, $66, $66, $CC, $0D, $00, $0B
DB $03, $73, $00, $83, $00, $0C, $00, $0D
DB $00, $08, $11, $1F, $88, $89, $00, $0E
DB $DC, $CC, $6E, $E6, $DD, $DD, $D9, $99
DB $BB, $BB, $67, $63, $6E, $0E, $EC, $CC
DB $DD, $DC, $99, $9F, $BB, $B9, $33, $3E

; $0134 - $013E: The title, in upper-case letters, followed by zeroes.
DB "LIFE"
DS 7 ; padding

; $013F - $0142: The manufacturer code.
DS 4

; $0143: Gameboy Color compatibility flag.    
GBC_UNSUPPORTED EQU $00
GBC_COMPATIBLE EQU $80
GBC_EXCLUSIVE EQU $C0
DB GBC_COMPATIBLE

; $0144 - $0145: "New" Licensee Code, a two character name.
DB "OK"

; $0146: Super Gameboy compatibility flag.
SGB_UNSUPPORTED EQU $00
SGB_SUPPORTED EQU $03
DB SGB_UNSUPPORTED

; $0147: Cartridge type. Either no ROM or MBC5 is recommended.
CART_ROM_ONLY EQU $00
CART_MBC1 EQU $01
CART_MBC1_RAM EQU $02
CART_MBC1_RAM_BATTERY EQU $03
CART_MBC2 EQU $05
CART_MBC2_BATTERY EQU $06
CART_ROM_RAM EQU $08
CART_ROM_RAM_BATTERY EQU $09
CART_MMM01 EQU $0B
CART_MMM01_RAM EQU $0C
CART_MMM01_RAM_BATTERY EQU $0D
CART_MBC3_TIMER_BATTERY EQU $0F
CART_MBC3_TIMER_RAM_BATTERY EQU $10
CART_MBC3 EQU $11
CART_MBC3_RAM EQU $12
CART_MBC3_RAM_BATTERY EQU $13
CART_MBC4 EQU $15
CART_MBC4_RAM EQU $16
CART_MBC4_RAM_BATTERY EQU $17
CART_MBC5 EQU $19
CART_MBC5_RAM EQU $1A
CART_MBC5_RAM_BATTERY EQU $1B
CART_MBC5_RUMBLE EQU $1C
CART_MBC5_RUMBLE_RAM EQU $1D
CART_MBC5_RUMBLE_RAM_BATTERY EQU $1E
CART_POCKET_CAMERA EQU $FC
CART_BANDAI_TAMA5 EQU $FD
CART_HUC3 EQU $FE
CART_HUC1_RAM_BATTERY EQU $FF
DB CART_ROM_ONLY

; $0148: Rom size.
ROM_32K EQU $00
ROM_64K EQU $01
ROM_128K EQU $02
ROM_256K EQU $03
ROM_512K EQU $04
ROM_1024K EQU $05
ROM_2048K EQU $06
ROM_4096K EQU $07
ROM_1152K EQU $52
ROM_1280K EQU $53
ROM_1536K EQU $54
DB ROM_32K

; $0149: Ram size.
RAM_NONE EQU $00
RAM_2K EQU $01
RAM_8K EQU $02
RAM_32K EQU $03
DB RAM_NONE

; $014A: Destination code.
DEST_JAPAN EQU $00
DEST_INTERNATIONAL EQU $01
DB DEST_INTERNATIONAL
; $014B: Old licensee code.
; $33 indicates new license code will be used.
; $33 must be used for SGB games.
DB $33
; $014C: ROM version number
DB $00
; $014D: Header checksum.
; Assembler needs to patch this.
DB $FF
; $014E- $014F: Global checksum.
; Assembler needs to patch this.
DW $FACE

; $0150: Code!
Init:
  di				; Disable interrupts
  ldh [IsGameBoyColor], a

  ld   sp, $e000
  call ScreenOff

  ldh a, [IsGameBoyColor]
  cp $11
  call z, InitGameBoyColor

; Set palettes and clear the scroll
  ld a, %00011100
  ldh [rOBP0], a
  ld a, %01101100
  ldh [rOBP1], a
  ldh [rBGP], a
  xor a
  ldh [rSCX], a
  ldh [rSCY], a
  ldh [$FF26], a ; turn off sound

; Clear first half of RAM
  ld hl, WRAM_START
  ld bc, 4096
  call memclear

; Copy in DMA routine
  ld hl, oam_dma_routine
  ld de, run_dma
  ld bc, oam_dma_routine_end - oam_dma_routine
  call memcpy

; Upload graphics
  ld hl, graphics
  ld de, VRAM_LOW
  ld bc, 2048
  call memcpy
; Clear the rest of VRAM
  ld hl, VRAM_LOW+2048
  ld bc, 8192-2048
  call memclear

; Initialize variables
  ld a, 4
  ldh [CursorX], a
  ldh [CursorY], a
  ldh [PrintX], a
  ldh [PrintY], a
  xor a
  ldh [InitializedRandom], a

  call InitBackground
  call ScreenOn

  ; Erase all initial sprites
  call wait_vblank
  ld a, sprites>>8
  call run_dma

  call RunProgram

edit_loop:
  call readkeys
  call DoKeyRepeat

  call wait_vblank

  ; Draw the cursor sprite
  ldh a, [CursorY]
  add a ; * 8
  add a
  add a
  add (2*8)+8-2
  ld [$fe00], a ; Y position

  ldh a, [CursorX]
  add a ; * 8
  add a
  add a
  add (1*8)+16-2
  ld [$fe01], a ; X position

  ld a, "@"
  ld [$fe02],a ; set tile number

  ; React to key inputs
  ldh a, [KeyNew]
  ld b, a

  bit 7, b
  jr z, .NotDown
  ldh a, [CursorY]
  inc a
  and 31
  ldh [CursorY], a
.NotDown:

  bit 6, b
  jr z, .NotUp
  ldh a, [CursorY]
  dec a
  and 31
  ldh [CursorY], a
.NotUp:

  bit 5, b
  jr z, .NotLeft
  ldh a, [CursorX]
  dec a
  and 31
  ldh [CursorX], a
.NotLeft:

  bit 4, b
  jr z, .NotRight
  ldh a, [CursorX]
  inc a
  and 31
  ldh [CursorX], a
.NotRight:
  jp edit_loop

get_random_number:
  ; Adapted from the random number generator used in Nova the Squirrel
  ; http://codebase64.org/doku.php?id=base:two_very_fast_16bit_pseudo_random_generators_as_lfsr
  ldh a, [InitializedRandom]
  or a
  jr nz, .already
  ldh a, [retraces]
  ld [random1+0], a
  inc a
  ld [random1+1], a
  inc a
  ld [random2+0], a
  inc a
  ld [random2+1], a
  ld a, 1
  ld [InitializedRandom], a
.already:

  push bc
  push de
  lda b, [random1+0]
  lda c, [random1+1]
  lda d, [random2+0]
  lda e, [random2+1]
  ; LFSR 1
  ld a,c
  add a
  add a
  xor c
  add a
  xor c
  add a
  add a
  xor c
  add a
  rl b         ;shift this left, "random" bit comes from low
  rl c
  ; LFSR 2
  ld a, e
  add a
  xor e
  add a
  add a
  rr d         ;shift this right, random bit comes from high - nicer when eor with random1
  rl e
  lda [random1+0], b
  lda [random1+1], c
  lda [random2+0], d
  lda [random2+1], e
  ld a, b
  xor d
  pop de
  pop bc

  ret

; -----------------------------------------

InitGameBoyColor:
  xor a
  ldh [$FF4F], a ; VRAM bank
  ld a, 1
  ldh [$FF70], a ; WRAM bank

  ld a, $80      ; index zero, auto increment
  ldh [$ff68], a ; background palette index
  ld hl, BG_Palette
  ld b, 2*4
.loop:
  ld a, [hl+]
  ld [$ff69], a
  dec b
  jr nz, .loop

; Now for sprites
  ld a, $80      ; index zero, auto increment
  ldh [$ff6a], a ; background palette index
  ld hl, Sprite_Palette
  ld b, 2*4
.loop2:
  ld a, [hl+]
  ld [$ff6b], a
  dec b
  jr nz, .loop2
  ret

RGB_Color: MACRO
  dw \1 | (\2<<5) | (\3<<10)
ENDM

BG_Palette:
; Background palette
  RGB_Color 31, 31, 31
  RGB_Color  0,  0,  0
  RGB_Color 13, 13, 13
  RGB_Color 22, 22, 22
Sprite_Palette
; Sprite palette
  RGB_Color 31, 24, 24
  RGB_Color 31, 12, 12
  RGB_Color 12,  0,  0
  RGB_Color 24,  0,  0
; -----------------------------------------

ScreenOff:
  call wait_vblank
  xor a
  ldh [rLCDC], a
  ret

ScreenOn:
  ld a, LCDCF_ON|LCDCF_OBJ8|LCDCF_OBJON|LCDCF_BGON|LCDCF_BG8000
  ldh [rLCDC],a
  ret

; -----------------------------------------

InitBackground:
  call ClearNametable

; Write "Conway's Life" at the top
  ld hl, TitleText
  ld de, SCREEN1+32*0+3
  ld bc, 13
  call memcpy
  
ClearNametable:
; Initialize nametable
  ld hl, SCREEN1
  ld bc, 1024
  ld e, " "
  jp memset

vblank:
  push af
  ld a, [retraces]
  inc a
  ld [retraces], a
  pop af
  reti

wait_vblank:
  push hl
  push af
  ld a, %00001
  ldh [$FFFF],a     ; Enable vblank interrupt
  ei

  ld   hl, retraces
  ld   a, [hl]
.loop:
  halt
  cp   a, [hl]
  jr   z, .loop
  pop af
  pop hl
  ret

stat:
timer:
serial:
joypad:
  reti

memclear:
  xor a
  ldi [hl], a
  dec bc
  ld a,b
  or c
  jr nz, memclear
  ret

memset:
  ld a, e
  ldi [hl], a
  dec bc
  ld a,b
  or c
  jr nz, memset
  ret

memcpy:
  ldi a, [hl]
  ld [de], a
  inc de
  dec bc
  ld a,b
  or c
  jr nz, memcpy
  ret

strcpy:
  ldi a, [hl]
  or a
  ret z
  ld [de], a
  inc de
  jr strcpy
  ret


oam_dma_routine:
  ldh [rDMA],a
  ld  a,$28
.wait:
  dec a
  jr  nz,.wait
  ret
oam_dma_routine_end:

readkeys:
  ld a, [KeyDown]
  ld [KeyLast], a

  ld a, KEY_BUTTONS
  ldh [rKEYS], a
  ldh a, [rKEYS]
  ldh a, [rKEYS]
  ldh a, [rKEYS]
  ldh a, [rKEYS]
  ldh a, [rKEYS]
  ldh a, [rKEYS]
  ldh a, [rKEYS]
  ldh a, [rKEYS]
  and $f
  ld b, a

  ld a, KEY_DIRECTION
  ldh [rKEYS], a
  ldh a, [rKEYS]
  ldh a, [rKEYS]
  ldh a, [rKEYS]
  ldh a, [rKEYS]
  ldh a, [rKEYS]
  ldh a, [rKEYS]
  ldh a, [rKEYS]
  ldh a, [rKEYS]
  and $f
  swap a
  or b
  cpl
  ld [KeyDown], a

  ld a, [KeyLast]
  cpl
  ld b, a
  ld a, [KeyDown]
  and b
  ld [KeyNew], a
  ret

DoKeyRepeat:
  ; Apply key repeat
  ld a, [KeyDown]
  and KEY_LEFT | KEY_DOWN | KEY_UP | KEY_RIGHT
  ld b, a
  ld a, [KeyLast]
  and KEY_LEFT | KEY_DOWN | KEY_UP | KEY_RIGHT
  cp b
  jr nz, .stop_repeat

  ld a, [KeyRepeat] ; Delay before auto-repeat
  cp 16
  jr nz, .no_repeat_yet
  ld a, [retraces]  ; Only repeat every 4 frames
  and 3
  ret nz

  ; Get the d-pad only
  ld a, [KeyDown]
  and KEY_LEFT | KEY_DOWN | KEY_UP | KEY_RIGHT
  ld b, a
  ; repeat those directions
  ld a, [KeyNew]
  or b
  ld [KeyNew], a

  jr .did_repeat
.no_repeat_yet:
  ld a, [KeyRepeat]
  inc a
  ld [KeyRepeat], a
  ret
.stop_repeat:
  xor a
  ld [KeyRepeat],a
.did_repeat:
  ret

TitleText:
  db "Conway's Life"

graphics:
INCBIN "graphics.chr"

; --------------------------------------------
SECTION "tokens", ROM0,ALIGN[8]

TokenPointers:
rept 32
 dw DoNothing ; nothing
endr
 dw DoNothing ; space
 dw OpCall    ; !
 dw OpPutString ; "
 dw OpWhile ; #
 dw OpDuplicate ; $
 dw OpDiscard ; %
 dw OpAND
 dw OpPushChar ; '
 dw DoNothing ; (
 dw DoNothing ; )
 dw OpMultiply ; *
 dw OpAdd ; +
 dw OpPutChar ; ,
 dw OpSub ; -
 dw OpPutDecimal ; .
 dw OpDivide ; /
 dw OpPushNumber ; 0
 dw OpPushNumber ; 1
 dw OpPushNumber ; 2
 dw OpPushNumber ; 3
 dw OpPushNumber ; 4
 dw OpPushNumber ; 5
 dw OpPushNumber ; 6
 dw OpPushNumber ; 7
 dw OpPushNumber ; 8
 dw OpPushNumber ; 9
 dw Op16Store
 dw Op16Load
 dw OpLess ; <
 dw OpEqual ; =
 dw OpGreater ; >
 dw OpIf ; ?
 dw OpRotate ; @
 dw DoNothing ; A, hex
 dw DoNothing ; B, hex
 dw DoNothing ; C, hex
 dw DoNothing ; D, hex
 dw DoNothing ; E, hex
 dw DoNothing ; F, hex
 dw DoNothing ; G
 dw DoNothing ; H
 dw DoNothing ; I
 dw DoNothing ; J
 dw DoNothing ; K
 dw DoNothing ; L
 dw DoNothing ; M
 dw DoNothing ; N
 dw DoNothing ; O
 dw DoNothing ; P
 dw DoNothing ; Q
 dw OpRepeat ; R repeat
 dw DoNothing ; S
 dw DoNothing ; T
 dw DoNothing ; U
 dw DoNothing ; V
 dw DoNothing ; W
 dw DoNothing ; X
 dw DoNothing ; Y
 dw DoNothing ; Z
 dw OpStartLambda ; [
 dw OpSwap ; \
 dw OpReturn ; ] return from lambda
 dw OpXOR ; ^
 dw OpNegate ; _
 dw DoNothing ; `
 dw OpPushVariable ; a
 dw OpPushVariable ; b
 dw OpPushVariable ; c
 dw OpPushVariable ; d
 dw OpPushVariable ; e
 dw OpPushVariable ; f
 dw OpPushVariable ; g
 dw OpPushVariable ; h
 dw OpPushVariable ; i
 dw OpPushVariable ; j
 dw OpPushVariable ; k
 dw OpPushVariable ; l
 dw OpPushVariable ; m
 dw OpPushVariable ; n
 dw OpPushVariable ; o
 dw OpPushVariable ; p
 dw OpPushVariable ; q
 dw OpPushVariable ; r
 dw OpPushVariable ; s
 dw OpPushVariable ; t
 dw OpPushVariable ; u
 dw OpPushVariable ; v
 dw OpPushVariable ; w
 dw OpPushVariable ; x
 dw OpPushVariable ; y
 dw OpPushVariable ; z
 dw DoNothing ; {
 dw OpOR ; |
 dw DoNothing ; }
 dw OpNOT ; ~
 dw DoNothing ; DEL

; --------------------------------------------
DoNothing:
  ret

OpNOT:
  ld a, [hl]
  cpl
  ld [hl+], a
  ld a, [hl]
  cpl
  ld [hl-], a
  ret

OpOR:
  ; get first number
  ld a, [hl+]
  ld d, [hl]
  inc hl
  ; OR with second number
  or [hl]
  ld [hl+], a
  ld a, [hl]
  or d
  ld [hl-], a
  ret

OpAND:
  ; get first number
  ld a, [hl+]
  ld d, [hl]
  inc hl
  ; AND with second number
  and [hl]
  ld [hl+], a
  ld a, [hl]
  and d
  ld [hl-], a
  ret

OpXOR:
  ; get first number
  ld a, [hl+]
  ld d, [hl]
  inc hl
  ; XOR with second number
  xor [hl]
  ld [hl+], a
  ld a, [hl]
  xor d
  ld [hl-], a
  ret

OpAdd:
  ; get first number
  ld a, [hl+]
  ld d, [hl]
  inc hl
  ; add second number
  add [hl]
  ld [hl+], a
  ld a, d
  adc [hl]
  ld [hl-], a
  ret

OpSub:
  ; get first number
  ld e, [hl]
  inc hl
  ld d, [hl]
  inc hl
  ; subtract first number from second
  ld a, [hl]
  sub e
  ld [hl+], a
  ld a, [hl]
  sbc d
  ld [hl-], a
  ret

OpPushVariable:
  dec hl
  ld [hl], vars>>8
  dec hl
  ldh a, [opcode]
  sub "a"
  add a
  ld [hl], a
  ret

OpNegate:
  xor a
  sub [hl]
  ld [hl+], a
  ld a, 0   ; can't use xor a, it clears carry
  sbc [hl]
  ld [hl-], a
  ret

OpReturn:
  push hl
  ; load return stack
  ld h, rstack >> 8
  ldh a, [rsp]
  ld l, a

  inc hl
  ld a, [hl+]
  ldh [programptr+0], a
  ld a, [hl]
  ldh [programptr+1], a
  ; a high byte of 255 means it's a special return
  ; for "#" or other loops.
  cp 255
  jr z, SpecialReturn

  ld a, l
  ldh [rsp], a
  pop hl
  ret

SpecialReturn:
; Return stack state during special returns:
; ??? ff-01 CC-CC BB-BB RR-RR
; 0   1  2  3  4  5  6  7  8
; C(condition), B(body), R(actual return address)

  ; Swap to the other type of special return
  dec hl      ; move back to low byte
  ld a, [hl]  ; get it
  ld b, a     ; save it to check against later
  xor 1       ; toggle to the other type
  ld [hl], a  ; write it back

  pop hl      ; restore stack pointer
  ; Don't save changed RSP
  ld a, b
  or a
  jr z, SpecialReturnCondition

  ; $ff01 = run body
SpecialReturnRun:
  ; Get run address from the return stack
  ld d, rstack >> 8
  ldh a, [rsp]
  add 4
  ld e, a

PushSpecialReturn:
  ; Jump to the loop part
  ld a, [de]
  ldh [programptr+1], a
  dec e
  ld a, [de]
  ldh [programptr+0], a
  ret

  ; $ff00 = check condition
SpecialReturnCondition:
  ld a, [hl+]
  or [hl]
  inc hl
  jr z, .LoopAbort

  ld d, rstack >> 8
  ldh a, [rsp]
  add 6
  ld e, a
  jp PushSpecialReturn

.LoopAbort:
  ; Return for real
  ldh a, [rsp]
  add 6
  ldh [rsp], a
  jp OpReturn

OpCall:
  ; Push the current program counter
  push hl
  ; load return stack
  ld h, rstack >> 8
  ldh a, [rsp]
  ld l, a

  ldh a, [programptr+1]
  ld [hl-], a
  ldh a, [programptr+0]
  ld [hl-], a

  ; Update return stack pointer
  ld a, l
  ldh [rsp], a
  pop hl

  ; Read the new address
  ld a, [hl+]
  ldh [programptr+0],a
  ld a, [hl+]
  ldh [programptr+1],a
  ret

OpSwap:
  ld d, h
  ld e, l
  inc de
  inc de

  ; swap low bytes
  ld a, [hl]
  push af
  ld a, [de]
  ld [hl], a
  pop af
  ld [de], a

  inc hl
  inc de

  ; swap high bytes
  ld a, [hl]
  push af
  ld a, [de]
  ld [hl], a
  pop af
  ld [de], a

  dec hl
  ret

OpStartLambda:
  ; push address of first byte in lambda
  dec hl
  ldh a, [programptr+1]
  ld [hl-], a
  ldh a, [programptr+0]
  ld [hl], a

  push hl
  ; find the end of the lambda
  ld d, 1 ; level 1
  ldh a, [programptr+1]
  ld h, a
  ldh a, [programptr+0]
  ld l, a
.loop:
  ld a, [hl+]
  cp "["
  jr nz, .notleft
  inc d
  jr .loop
.notleft:
  cp "]"
  jr nz, .loop
  dec d ; if level is now zero, go back
  jr nz, .loop

  ; write new program counter
  ld a, h
  ldh [programptr+1], a
  ld a, l
  ldh [programptr+0], a

  pop hl
  ret

OpRepeat:
  ret

OpRotate:
  push hl

  ; Make a copy of the top 3 entries
  push hl
  ld de, temp
  ld bc, 6
  call memcpy
  pop hl

  ; Rewrite the rearranged stack
  ldh a, [temp+4]
  ld [hl+], a
  ldh a, [temp+5]
  ld [hl+], a
  ldh a, [temp+0]
  ld [hl+], a
  ldh a, [temp+1]
  ld [hl+], a
  ldh a, [temp+2]
  ld [hl+], a
  ldh a, [temp+3]
  ld [hl+], a
  ; Restore stack pointer
  pop hl
  ret

OpIfElse:
  ret

OpIf:
  call OpSwap

  ; pop a word, is it nonzero?
  ld a, [hl+]
  or [hl]
  inc hl ; doesn't change flags
  ; if so, call, otherwise discard
  jp nz, OpCall
OpDiscard:
  inc hl
  inc hl
  ret

OpGreater:
  ; a b -- a>b
  ; get number 1
  ld c, [hl]
  inc hl
  ld b, [hl]
  inc hl
  ; get number 2
  ld e, [hl]
  inc hl
  ld d, [hl]
  dec hl
  ; HL is positioned to write the result
  ld a, d
  cp b
  blt False   ; <
  jr z, .same ; =
  jr True     ; >
.same:
  ld a, e
  cp c
  blt False   ; <
  jr z, False ; =
  jr True     ; >

OpLess:
  ; a b -- a<b
  ; get number 1
  ld c, [hl]
  inc hl
  ld b, [hl]
  inc hl
  ; get number 2
  ld e, [hl]
  inc hl
  ld d, [hl]
  dec hl
  ; HL is positioned to write the result
  ld a, d
  cp b
  jr z, .same ; =
  bge False   ; >
  jr True     ; <
.same:
  ld a, e
  cp c
  jr z, False ; =
  bge False   ; >
  jr True     ; <
  ret

OpEqual:
  call OpXOR
  ld a, [hl+]
  or a, [hl]
  dec hl
  jr nz, False

True:
  ld [hl], 255
  inc hl
  ld [hl], 255
  dec hl
  ret
False:
  ld [hl], 0
  inc hl
  ld [hl], 0
  dec hl
  ret

Op16Load:
  ; Get address
  ld e, [hl]
  inc hl
  ld d, [hl]
  dec hl
  ; Load two bytes
  ld a, [de]
  ld [hl+], a
  inc de
  ld a, [de]
  ld [hl-], a
  ret

Op16Store:
  ; Get data
  ld e, [hl]
  inc hl
  ld d, [hl]
  inc hl
  ; Get address
  ld c, [hl]
  inc hl
  ld b, [hl]
  inc hl
  ; Store
  ld a, e
  ld [bc], a
  inc bc
  ld a, d
  ld [bc], a
  ret

Op8Load:
  ; Get address
  ld e, [hl]
  inc hl
  ld d, [hl]
  dec hl
  ; Load one byte
  ld a, [de]
  ld [hl+], a
  xor a
  ld [hl-], a
  ret

Op8Store:
  ; Get data
  ld e, [hl]
  inc hl
  ld d, [hl]
  inc hl
  ; Get address
  ld c, [hl]
  inc hl
  ld b, [hl]
  inc hl
  ; Store
  ld a, e
  ld [bc], a
  ret

OpPushNumber:
  push hl
  ; Start with a one-digit number
  ; (put it in HL)
  ldh a, [opcode]
  sub "0"
  ld h, 0
  ld l, a

  ldh a, [programptr+1]
  ld b, a
  ldh a, [programptr+0]
  ld c, a
.loop:
  ld a, [bc]
  inc bc
  cp "0"
  jr c, .exit
  cp "9"+1
  jr nc, .exit
  sub "0" ; convert from ASCII

  ; multiply HL by 10
  add hl, hl
  ld d, h
  ld e, l
  add hl, hl
  add hl, hl
  add hl, de

  ld d, 0
  ld e, a
  add hl, de

  jr .loop
.exit:
  ; save HL
  ld d, h
  ld e, l

  ; write new program counter
  dec bc
  ld a, b
  ldh [programptr+1], a
  ld a, c
  ldh [programptr+0], a
  pop hl

  ; write the read number
  dec hl
  ld [hl], d
  dec hl
  ld [hl], e
  ret

OpMultiply:
  ; Read two 16-bit numbers
  ld e, [hl]
  inc hl
  ld d, [hl]
  inc hl
  ld c, [hl]
  inc hl
  ld b, [hl]
  dec hl

  ; Multiply
  push hl
  call mult_de_bc
  ld d, h
  ld e, l
  pop hl

  ; Write result
  ld [hl], e
  inc hl
  ld [hl], d
  dec hl
  ret

; http://wikiti.brandonw.net/index.php?title=Z80_Routines:Math:Multiplication
mult_de_bc: ; de*bc = dehl
   ld	hl, 0

   sla	e		; optimised 1st iteration
   rl	d
   jr	nc, @+4
   ld	h, b
   ld	l, c

   ld	a, 15
.loop:
   add	hl, hl
   rl	e
   rl	d
   jr	nc, @+6
   add	hl, bc
   jr	nc, @+3
   inc	de
   
   dec	a
   jr	nz, .loop   
   ret

OpDivide:
  ; Read two 16-bit numbers
  ld c, [hl]
  inc hl
  ld b, [hl]
  inc hl
  ld e, [hl]
  inc hl
  ld d, [hl]
  dec hl

  ; Divide
  push hl
  call div_DE_BC_DEBCu
  pop hl

  ; Write result
  ld [hl], e
  inc hl
  ld [hl], d
  dec hl
  ret

; 16 bit division
; from http://www.devrs.com/gb/asmcode.php
; DE = DE / BC, BC = remainder
div_DE_BC_DEBCu:
        ld      hl,temp
        ld      [hl],c
        inc     hl
        ld      [hl],b
        inc     hl
        ld      [hl],17
        ld      bc,0
.nxtbit:
        ld      hl,temp+2
        ld      a,e
        rla
        ld      e,a
        ld      a,d
        rla
        ld      d,a
        dec     [hl]
        ret     z
        ld      a,c
        rla
        ld      c,a
        ld      a,b
        rla
        ld      b,a
        dec     hl
        dec     hl
        ld      a,c
        sub     [hl]
        ld      c,a
        inc     hl
        ld      a,b
        sbc     a,[hl]
        ld      b,a
        jr      nc,.noadd

        dec     hl
        ld      a,c
        add     a,[hl]
        ld      c,a
        inc     hl
        ld      a,b
        adc     a,[hl]
        ld      b,a
.noadd:
        ccf
        jr      .nxtbit

OpPutDecimal:
  push hl
  ld a,[hl]
  inc hl
  ld h,[hl]
  ld l,a
  call ConvertNumberHL
  pop hl

  inc hl
  inc hl
  ret

; https://stackoverflow.com/questions/38666119/converting-an-unsigned-16-bit-integer-from-hl-into-text-using-my-own-non-ascii-c
ConvertNumberHL::
    ; Get the number in hl as text in de
    ld bc, -10000
    call .one
    ld bc, -1000
    call .one
    ld bc, -100
    call .one
    ld bc, -10
    call .one
    ld c, -1
.one
    ld a, "0"-1
.two
    inc a
    add hl, bc
    jr c, .two
    push bc;
    push af;
    ld a, b;
    cpl;
    ld b, a;
    ld a, c;
    cpl;
    ld c, a;
    inc bc;
    call c, .carry;
    pop af;
    add hl, bc;
    pop bc;

    ; character is in A
    push bc
    call PutOneCharacter
    pop bc
    ret
.carry;
    dec bc;
    ret;

OpPushChar:
  ldh a, [programptr+1]
  ld d, a
  ldh a, [programptr+0]
  ld e, a

  dec hl
  ld [hl], 0
  dec hl
  ld a, [de] ; Get the next character
  inc de     ; Step PC ahead
  ld [hl], a ; Store the character

  ld a, d
  ldh [programptr+1], a
  ld a, e
  ldh [programptr+0], a
  ret

OpDuplicate:
  inc hl
  ld a, [hl-]
  ld d, a
  ld a, [hl-]
  ld e, a
  ; Write the copy
  ld [hl], d
  dec hl
  ld [hl], e
  ret

OpOver:
  inc hl
  inc hl
  inc hl
  ld a, [hl-]
  ld d, a
  ld a, [hl-]
  ld e, a
  dec hl
  dec hl
  ; Write the copy
  ld [hl], d
  dec hl
  ld [hl], e
  ret

OpWhile:
  ; temp = body low, body high, cond low, cond high
  ld de, temp
  ld bc, 4
  call memcpy
  ; HL has now popped the two words on the stack

  push hl
  ld h, rstack >> 8
  ldh a, [rsp]
  ld l, a

  ; Push real return address
  ldh a, [programptr+1]
  ld [hl-], a
  ldh a, [programptr+0]
  ld [hl-], a

  ; Copy the body
  ldh a, [temp+1]
  ld [hl-], a
  ldh a, [temp+0]
  ld [hl-], a

  ; Copy the condition address
  ldh a, [temp+3]
  ld [hl-], a
  ldh a, [temp+2]
  ld [hl-], a

  ; Copy the special marker
  ld a, 255
  ld [hl-], a
  xor a
  ld [hl-], a

  ; Save new return pointer
  ld a, l
  ldh [rsp], a
  pop hl

  ldh a, [temp+3]
  ldh [programptr+1], a
  ldh a, [temp+2]
  ldh [programptr+0], a
  ret

OpPutString:
  push hl
  ldh a, [programptr+1]
  ld h, a
  ldh a, [programptr+0]
  ld l, a

.loop:
  ld a, [hl+]
  cp 34 ; terminating quotation
  jr z, .exit
  call PutOneCharacter
  jr .loop
.exit:

  ld a, h
  ldh [programptr+1], a
  ld a, l
  ldh [programptr+0], a
  pop hl
  ret

OpPremade:
  ret

OpPutChar:
  ld a, [hl+]
  inc hl
PutOneCharacter:
  push hl
  push af
  ; Calculate the screen position first
  ld h, 0
  ldh a, [PrintY]
  ld l, a
  ; * 32
  add hl, hl
  add hl, hl
  add hl, hl
  add hl, hl
  add hl, hl
  ; Add X position
  ldh a, [PrintX]
  ld d, 0
  ld e, a
  inc a            ; update print X
  ldh [PrintX], a
  cp 20
  jr nz, .no_wrap
  xor a
  ldh [PrintX], a
  ldh a, [PrintY]
  inc a
  ldh [PrintY], a
.no_wrap:

  add hl, de
  ; Add screen base
  ld de, SCREEN1
  add hl, de
  call wait_vblank

  ; Write that character
  pop af
  ld [hl], a
  pop hl
  ret

; --------------------------------------------

RunProgram:
  ; return stack
  ld a, 255
  ld [rsp], a
  ; data stack
  ld hl, dstack+255

  ld a, SampleProgram >> 8
  ldh [programptr+1], a
  ld a, SampleProgram & 255
  ldh [programptr+0], a

.loop:
  call RunOneInstruction
  jr .loop

RunOneInstruction:
  ; Read program counter
  ldh a, [programptr+0]
  ld e, a
  ldh a, [programptr+1]
  ld d, a

  ld a, [de]
  or a
  jr z, .exit
  push af
  ldh [opcode], a
  inc de

  ; Write back increased program counter
  ld a, e
  ldh [programptr+0], a
  ld a, d
  ldh [programptr+1], a
  pop af

  ; Form a pointer to the pointer
  ld d, TokenPointers >> 8
  add a, a
  ld e, a
  ld a, [de]
  push af
  inc de
  ld a, [de]
  ld d, a
  pop af
  ld e, a

  ; Jump to the pointer
  push de
  ret
.exit:
  pop de
  ret

SampleProgram:
;  db "1 2 3 @ . . .", 0

  db "50 9[1-$][\\$@$@$@$@\\/*=[1-$$[%\\1-$@]?0=[\\$.' ,\\]?]?]#", 0
;  db "100 100 = . ", 0
;  db "1[$10<][$.' , 1+]# \"done\"",0
;  db "['c,1]['b,]# \"done\"",0
  db "'a[$ 123 =~][$,1+]#%",0
;  db "  'a 1+ , 1. ",34,"test",34,0
;  db "1 2 3 4 +++ .  ", 0
;  db "['a,]$$!!!",34,"test",34,0
;  db "a.", 0
;  db "25 5 / .",0
